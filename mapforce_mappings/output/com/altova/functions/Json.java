////////////////////////////////////////////////////////////////////////
//
// Json.java
//
// This file was generated by MapForce MapForce 2021r2sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

package com.altova.functions;

import com.altova.json.*;
import com.altova.mapforce.*;
import com.altova.text.FileIO;

import java.util.*;
import java.math.BigDecimal;
import java.io.*;

public class Json {
	public static com.altova.json.Array CreateArray(IEnumerable sequence) throws Exception {
		ArrayList<java.lang.Object> list = new ArrayList<java.lang.Object>();
		IEnumerator en = sequence.enumerator();
		while (en.moveNext())
			list.add(en.current());
		
		return new com.altova.json.Array(list.toArray(new com.altova.json.Value[0]));
	}

	public static com.altova.json.Object CreateObject(IEnumerable sequence) throws Exception {
		ArrayList<Member> list = new ArrayList<Member>();
		IEnumerator en = sequence.enumerator();
		while (en.moveNext())
			list.add((Member)en.current());
		
		return new com.altova.json.Object(list.toArray(new Member[0]));
	}

	public static com.altova.json.Primitive CreateNumber(BigDecimal value) {
		return new com.altova.json.Primitive(value);
	}

	public static com.altova.json.Primitive CreateString(String value) {
		return new com.altova.json.Primitive(value);
	}


	public static com.altova.json.Primitive CreateBoolean(boolean value) {
		return new com.altova.json.Primitive(value);
	}

	public static IEnumerable CreateMember(String name, IEnumerable values) throws Exception {
		IEnumerator en = values.enumerator();
		while (en.moveNext()) {
			if (en.current() instanceof com.altova.json.Value)
				return new MFSingletonSequence( new com.altova.json.Member(name, (com.altova.json.Value)en.current()) );
		}
		
		return new MFEmptySequence();
	}

	public static String GetMemberName(com.altova.mapforce.IMFNode item) throws Exception {
		return ((com.altova.json.Member)item).getNodeName();
	}
	public static com.altova.json.Value GetMemberValue(com.altova.mapforce.IMFNode item) {
		return ((com.altova.json.Member)item).getValue();
	}

	public static IEnumerable GetArrayItems(com.altova.mapforce.IMFNode item) {
		return new MFElement.ListAsEnumerable(Arrays.asList(((com.altova.json.Array)item).getItems()));
	}
	public static com.altova.json.Value RootValue(com.altova.mapforce.IMFNode document) {
		return ((com.altova.json.Document)document).getRootValue();
	}
	public static IEnumerable GetObjectMembers(com.altova.mapforce.IMFNode item) {
		return new MFElement.ListAsEnumerable(Arrays.asList(((com.altova.json.Object)item).getMembers()));
	}

	public static IEnumerable GetMemberByName(com.altova.mapforce.IMFNode item, String name) {
		ArrayList<Member> list = new ArrayList<Member>();
		for (Member member: ((com.altova.json.Object)item).getMembers()) {
			if (member.getNodeName().equals(name))
				list.add(member);
		}
		return list.size() > 0 ? new MFElement.ListAsEnumerable(list) : new MFEmptySequence();
	}

	public static IEnumerable AsObject(com.altova.mapforce.IMFNode item) {
		if (item instanceof com.altova.json.Object)
			return new MFSingletonSequence((com.altova.json.Object)item);
		return new MFEmptySequence();
	}
	
	public static IEnumerable AsArray(com.altova.mapforce.IMFNode item) {
		if (item instanceof com.altova.json.Array)
			return new MFSingletonSequence((com.altova.json.Array)item);
		return new MFEmptySequence();
	}


	public static IEnumerable AsNumber(com.altova.mapforce.IMFNode item) {
		com.altova.json.Primitive x = item instanceof com.altova.json.Primitive ? (com.altova.json.Primitive)item : null;
		if (x != null && x.getType() == com.altova.json.Value.Type.Number)
			return new MFSingletonSequence(x.typedValue());

		return new MFEmptySequence();
	}

	public static IEnumerable AsString(com.altova.mapforce.IMFNode item) {
		com.altova.json.Primitive x = item instanceof com.altova.json.Primitive ? (com.altova.json.Primitive)item : null;
		if (x != null && x.getType() == com.altova.json.Value.Type.String)
			return new MFSingletonSequence(x.typedValue());

		return new MFEmptySequence();
	}
	public static IEnumerable AsBoolean(com.altova.mapforce.IMFNode item) {
		com.altova.json.Primitive x = item instanceof com.altova.json.Primitive ? (com.altova.json.Primitive)item : null;
		if (x != null && x.getType() == com.altova.json.Value.Type.Boolean)
			return new MFSingletonSequence(x.typedValue());

		return new MFEmptySequence();
	}
	public static IEnumerable AsNull(com.altova.mapforce.IMFNode item) {
		com.altova.json.Primitive x = item instanceof com.altova.json.Primitive ? (com.altova.json.Primitive)item : null;
		if (x != null && x.getType() == com.altova.json.Value.Type.Null)
			return new MFSingletonSequence(x);

		return new MFEmptySequence();
	}


	public static com.altova.mapforce.IMFNode Parse(String string, java.lang.Object o) throws IOException {
		boolean json5 = false;
		boolean jsonLines = false;
		Boolean[] x = o instanceof Boolean[] ? (Boolean[])o : null;
		if (x != null && x.length >= 0) {
			// prettyPrint = x[0];
			json5 = x[1];
			jsonLines = x[2];
		}

		StringReader source = new StringReader(string);
		return new com.altova.json.Document(com.altova.json.Parser.Parse(source, json5, jsonLines), "");
	}


	public static String Serialize(IEnumerable sequence, java.lang.Object o) throws Exception {
		
		boolean json5 = false;
		boolean prettyPrint = false;
		boolean jsonLines = false;
		Boolean[] x = o instanceof Boolean[] ? (Boolean[])o : null;
		if (x != null && x.length >= 0) {
			prettyPrint = x[0];
			json5 = x[1];
			jsonLines = x[2];
		}

		try (com.altova.io.StringOutput output = new com.altova.io.StringOutput()) {
			com.altova.functions.Json.Write(sequence, output, prettyPrint, json5, jsonLines);
			return output.getString().toString();
		}
	}
	
	public static com.altova.json.Document Load(com.altova.io.Input input, com.altova.json.ValueAcceptor[] schemas, boolean json5, boolean jsonLines) throws Exception {
		com.altova.json.Value value = null;
		//String uri = null;
		switch (input.getType()) {
			case com.altova.io.Input.IO_READER:
				value = Parser.Parse(input.getReader(), json5, jsonLines);
				//uri = input.getFilename();
				break;
			case com.altova.io.Input.IO_STREAM:
				value = Parser.Parse(input.getStream(), json5, jsonLines);
				//uri = input.getFilename();
				break;
			default:
				throw new UnsupportedOperationException("Cannot read JSON from this input.");

		}
		value.Validate(schemas, jsonLines);
		return new com.altova.json.Document(value, input.getFilename());
	}

	public static class Target {
		boolean _prettyPrint;
		boolean _json5;
		java.io.Writer _out;
		int _indent = 0;
		boolean _needbreak = false;

		public Target(java.io.Writer w, boolean prettyPrint, boolean json5) {
			_out = w;
			_prettyPrint = prettyPrint;
			_json5 = json5;
		}

		boolean MustEscapeKey(String s) {
			if (!_json5)
				return true;
			if (s.length() == 0)
				return true;
			if (!Character.isLetter(s.charAt(0)))
				return true;
			for (int i = 1; i != s.length(); ++i)
				if (!Character.isLetterOrDigit(s.charAt(i)))
					return true;
			return false;
		}

		public void WriteInNewLine(String s) throws IOException {
			if (_prettyPrint) {
				_needbreak = true;
				if (s == null)
					return;

				_out.write("\r\n");
				_needbreak = false;
				for (int i = 0; i != _indent; ++i)
					_out.write("\t");
			} else if (s == null) return;
			_out.write(s);
		}

		void WriteInSameLine(String s) throws IOException {
			if (_needbreak)
				WriteInNewLine(s);
			else
				_out.write(s);
		}

		void WriteDecorative(String s) throws IOException {
			if (_prettyPrint)
				_out.write(s);
		}

		void IndentMore() {
			_indent += 1;
		}

		void IndentLess() {
			_indent -= 1;
		}

		String Quote(String s) {
			StringBuilder sb = new StringBuilder();
			sb.append('"');
			for (char c: s.toCharArray()) {
				// escape control, quote, backslash and surrogates.
				if (c == '"' || c == '\\') {
					sb.append('\\');
					sb.append(c);
				} else if (c <= 0x1F || (c >= 0x7F && c <= 0x9F) || (c >= 0xD800 && c <= 0xDFFF)) {
					sb.append(String.format("\\u%04X", (int)c));
				} else {
					sb.append(c);
				}
			}
			sb.append('"');
			return sb.toString();
		}

		public void Write(com.altova.json.Value value) throws Exception {
			boolean first = true;
			switch (value.getType()) {
				case Object:
					com.altova.json.Object obj = (com.altova.json.Object)value;
					WriteInSameLine("{");
					IndentMore();
					for (Member member: obj.getMembers()) {
						if (first)
							first = false;
						else
							WriteInSameLine(",");
						if (MustEscapeKey(member.getName()))
							WriteInNewLine(Quote(member.getName()) + ":");
						else
							WriteInNewLine(member.getName() + ":");
						WriteDecorative(" ");
						Write(member.getValue());
					}
					IndentLess();
					if (first)
						WriteInSameLine("}");
					else
						WriteInNewLine("}");
					break;
				case Array:
					Array arr = (com.altova.json.Array)value;
					WriteInSameLine("[");
					IndentMore();
					WriteInNewLine("");
					for (Value item: arr.getItems()) {
						if (first)
							first = false;
						else {
							WriteInSameLine(",");
							WriteDecorative(" ");
						}
						Write(item);
					}
					IndentLess();
					WriteInNewLine("]");
					break;
				case String:
					WriteInSameLine(Quote((String)value.typedValue()));
					break;
				case Number:
					BigDecimal dec = ((BigDecimal)value.typedValue()).stripTrailingZeros();
					WriteInSameLine((dec.scale() < 0 ? dec.setScale(0) : dec).toPlainString());
					break;
				case Boolean:
					WriteInSameLine(((Boolean)value.typedValue()) ? "true" : "false");
					break;
				case Null:
					WriteInSameLine("null");
					break;
			}

		}

	}


	static void Write(com.altova.json.Value value, java.io.Writer output, boolean prettyPrint, boolean json5) throws Exception {
		Target t = new Target(output, prettyPrint, json5);
		t.Write(value);
		output.flush();
	}

	static void Write(com.altova.json.Value value, com.altova.io.Output target, boolean prettyPrint, boolean json5) throws Exception {
		switch (target.getType()) {
			case com.altova.io.Output.IO_STREAM:
				try (FileIO io = new FileIO(target.getStream(), null, false, false)) {
					Write(value, io.openWriteStream(), prettyPrint, json5);
				}
				break;
			case com.altova.io.Output.IO_WRITER:
				Write(value, target.getWriter(), prettyPrint, json5);
				break;
			default:
				throw new UnsupportedOperationException("Cannot write JSON to this input.");
		}
	}

	private static void WriteJsonLines(IEnumerator en, java.io.Writer writer, boolean json5) throws Exception {
		do {
			Write((com.altova.json.Value)en.current(), writer, false, json5);
			writer.write("\r\n");
			writer.flush();
		}
		while (en.moveNext());
	}


	public static void Write(IEnumerable sequence, com.altova.io.Output target, boolean prettyPrint, boolean json5, boolean jsonLines) throws Exception {
		IEnumerator en = sequence.enumerator();
		if (!en.moveNext())
			throw new UnsupportedOperationException("No JSON to serialize.");
			
		if (target.getType() != com.altova.io.Output.IO_WRITER && target.getType() != com.altova.io.Output.IO_STREAM)
			throw new UnsupportedOperationException("Cannot write JSON to this input.");
							
			if (jsonLines) {
				if (target.getType() == com.altova.io.Output.IO_STREAM)
					try (FileIO io = new FileIO(target.getStream(), null, false, false)) {
						WriteJsonLines(en, io.openWriteStream(), json5);
					}
				else
					WriteJsonLines(en, target.getWriter(), json5);
			} else {
				Write((com.altova.json.Value)en.current(), target, prettyPrint, json5);
				if (en.moveNext())
					throw new UnsupportedOperationException("Extra JSON to serialize.");
			}
	}


	public static boolean IsA(com.altova.mapforce.IMFNode item, String schema) {
		return ((com.altova.json.Value)item).IsA(schema);

	}

	public static boolean IsValueA(com.altova.mapforce.IMFNode item, String schema) {
		return ((com.altova.json.Member)item).getValue().IsA(schema);

	}
}
