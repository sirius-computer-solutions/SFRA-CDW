/**
 * Demandware Script File
 */
importPackage( dw.system );
importPackage( dw.io );
importScript( 'export/handlers/AbstractExportHandler.ds' );
importScript( 'export/ProductFieldMapper.ds' );
importScript( 'export/OrderFieldMapper.ds' );
importScript( 'export/ProfileFieldMapper.ds' );

// Hack, because vars cannot be imported in DW, only functions
function getCSVExportHandler() {
    return CSVExportHandler;
}
var AbstractExportHandler = getAbstractExportHandler();

var CSVExportHandler = AbstractExportHandler.extend(
        /** @lends CSVExportHandler.prototype */
        {
            /**
             * Creates a new CSV export handler instance
             * 
             * @constructs
             * @augments AbstractExportHandler
             * @param {dw.io.File} file The file to export to
             * @param {String} encoding The file encoding
             * @param {String} separator The separator to use
             * @param {Array} fields An array with the fields to use
             * @param {Array} header An array with the header to use
             */
            init : function(writer : Writer, separator, fields : Array, header : Array, contextObject : String){
                this.handlesProducts = true;
                this.fileWriter = writer;
                this.writer = new CSVStreamWriter(this.fileWriter, separator);
                this.header = header || fields;
                this.fields = fields;
                this.contextObject = contextObject;
                
                if('Catalog' === contextObject) {
                    this.initProductFieldCache();
                } else if ('Order' === contextObject) {
                    this.initOrderFieldCache();
                } else if ('Customer' === contextObject) {
                    this.initProfileFieldCache();
                }
            },
            /**
             * Initialize the a field cache to avoid parsing the expressions for
             * every product
             * 
             * @param {dw.catalog.Product} product A product to get the attribute model (can be
             *            any product)
             */
            initProductFieldCache :function(product : Product){
                this.fieldCache = {};
                for each(var field : String in this.fields){
                    this.fieldCache[field] = ProductFieldMapper.parseField(field,product);
                }
            },
            initOrderFieldCache :function(order : dw.order.Order){
                this.fieldCache = {};
                for each(var field : String in this.fields){
                    this.fieldCache[field] = OrderFieldMapper.parseField(field, order);
                }
            },
            initProfileFieldCache :function(profile : dw.customer.Profile){
                this.fieldCache = {};
                for each(var field : String in this.fields){
                    this.fieldCache[field] = ProfileFieldMapper.parseField(field, profile);
                }
            },
            /**
             * Get the values for all field as an array
             * 
             * @param {dw.catalog.Product} product The product to export
             * @returns {Array} An array with the defined values
             */
            getProductFields : function(product : dw.catalog.Product){
                result = [];
                for each(var field : String in this.fields){
                    var f = this.fieldCache[field];
                    result.push(ProductFieldMapper.getField(product, f.attribute, f.format));
                }		
                return result;
            },
            getOrderFields : function(order : dw.order.Order){
                result = [];
                for each(var field : String in this.fields){
                    var f = this.fieldCache[field];
                    result.push(OrderFieldMapper.getField(order, f.attribute, f.format));
                }		
                return result;
            },
            getProfileFields : function(profile : dw.customer.Profile){
                result = [];
                for each(var field : String in this.fields){
                    var f = this.fieldCache[field];
                    result.push(ProfileFieldMapper.getField(profile, f.attribute, f.format));
                }		
                return result;
            },
            exportProduct : function (product : dw.catalog.Product){
                this.writer.writeNext(this.getProductFields(product));
            },
            exportOrder : function (order : dw.order.Order){
                this.writer.writeNext(this.getOrderFields(order));
            },
            exportProfile : function (profile : dw.customer.Profile){
                this.writer.writeNext(this.getProfileFields(profile));
            },
            beginExport : function() {
                this.writer.writeNext(this.header);
            },
            endExport: function () {
                this.writer.close();
                this.fileWriter.close();
            }
        });

if(typeof exports !== 'undefined') {
    exports.CSVExportHandler = CSVExportHandler;
}